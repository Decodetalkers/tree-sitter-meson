===========
base if
===========
if true 
  something()
endif
---
(source_file
  (if_condition
    (if_command
      (condition_unit
        (bool))
      (normal_command
        (identifier)))))

============
base if else 
============
if a.enabled()
  something()
else
  gammer()
endif
---
(source_file
  (if_condition
    (if_command
      (condition_unit
        (experession_statement
          (identifier)
          (normal_command
            (identifier))))
      (normal_command
        (identifier)))
    (else_command
      (normal_command
        (identifier)))))
================
base if elif else
===============

if a.enabled()
  something()
elif true
  beta()
elif c.enable and b.enabled
else
  gammer()
endif

---
(source_file
  (if_condition
    (if_command
      (condition_unit
        (experession_statement
          (identifier)
          (normal_command
            (identifier))))
      (normal_command
        (identifier)))
    (elseif_command
      (condition_unit
        (bool))
      (normal_command
        (identifier)))
    (elseif_command
      (condition_unit
        (experession_statement
          (identifier)
          (identifier))
        (experession_statement
          (identifier)
          (identifier))))
    (else_command
      (normal_command
        (identifier)))))
=====
conflix if 
=====

if cc.has_function('memfd_create')
  config.set('HAVE_MEMFD_CREATE', true)
  config.set('HAVE_MEMFD', true)
elif cc.has_function('SYS_memfd_create', prefix : '#include <sys/syscall.h>')
  config.set('HAVE_MEMFD', true)
endif

---
(source_file
  (if_condition
    (if_command
      (condition_unit
        (experession_statement
          (identifier)
          (normal_command
            (identifier)
            (variableunit
              (string)))))
      (experession_statement
        (identifier)
        (normal_command
          (identifier)
          (variableunit
            (string))
          (variableunit
            (identifier))))
      (experession_statement
        (identifier)
        (normal_command
          (identifier)
          (variableunit
            (string))
          (variableunit
            (identifier)))))
    (elseif_command
      (condition_unit
        (experession_statement
          (identifier)
          (normal_command
            (identifier)
            (variableunit
              (string))
            (pair
              (identifier)
              (string)))))
      (experession_statement
        (identifier)
        (normal_command
          (identifier)
          (variableunit
            (string))
          (variableunit
            (identifier)))))))

=================
muti if else 
=================
if buildtype != 'debug' and buildtype != 'debugoptimized'
	c_args += '-DNDEBUG'
endif

---
(source_file
  (if_condition
    (if_command
      (condition_unit
        (identifier)
        (string)
        (identifier)
        (string))
      (operatorunit
        (identifier)
          (variableunit
            (string))))))
===================
if else very conflix 
==================

if git.found()
	git_describe = run_command([git, 'describe', '--tags', '--long'])
	git_branch = run_command([git, 'rev-parse', '--abbrev-ref', 'HEAD'])
	if git_describe.returncode() == 0 and git_branch.returncode() == 0
		c_args += '-DGIT_VERSION="@0@ (@1@)"'.format(
			git_describe.stdout().strip(),
			git_branch.stdout().strip(),
		)
	endif
endif

---
(source_file
   (if_condition
     (if_command
       (condition_unit
         (experession_statement
           (identifier)
           (normal_command
             (identifier))))
       (operatorunit
         (identifier)
         (normal_command
           (identifier)
           (list
             (identifier)
             (string)
             (string)
             (string))))
       (operatorunit
         (identifier)
         (normal_command
           (identifier)
           (list
             (identifier)
             (string)
             (string)
             (string))))
       (if_condition
         (if_command
           (condition_unit
             (experession_statement
               (identifier)
               (normal_command
                 (identifier)))
             (number)
             (experession_statement
               (identifier)
               (normal_command
                 (identifier)))
             (number))
           (operatorunit
             (identifier)
             (experession_statement
               (string)
               (normal_command
                 (identifier)
                 (experession_statement
                   (identifier)
                   (experession_statement
                     (normal_command
                       (identifier))
                     (normal_command
                       (identifier))))
                 (experession_statement
                   (identifier)
                   (experession_statement
                     (normal_command
                       (identifier))
                     (normal_command
                       (identifier))))))))))))
