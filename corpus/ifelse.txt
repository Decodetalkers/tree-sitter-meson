===========
base if
===========
if true 
  something()
endif
---
(source_file
  (if_condition
    (if_command
      (bool)
      (normal_command
        (identifier)))))

============
base if else 
============
if a.enabled()
  something()
else
  gammer()
endif
---
(source_file
  (if_condition
    (if_command
      (experession_statement
        (identifier)
        (normal_command
          (identifier)))
      (normal_command
        (identifier)))
    (else_command
      (normal_command
        (identifier)))))
================
base if elif else
===============

if a.enabled()
  something()
elif true
  beta()
elif c.enable and b.enabled
else
  gammer()
endif

---
(source_file
  (if_condition
    (if_command
      (experession_statement
        (identifier)
        (normal_command
          (identifier)))
      (normal_command
        (identifier)))
    (elseif_command
      (condition_unit
        (bool))
      (normal_command
        (identifier)))
    (elseif_command
      (condition_unit
        (experession_statement
          (identifier)
          (identifier))
        (experession_statement
          (identifier)
          (identifier))))
    (else_command
      (normal_command
        (identifier)))))
=====
conflix if 
=====

if cc.has_function('memfd_create')
  config.set('HAVE_MEMFD_CREATE', true)
  config.set('HAVE_MEMFD', true)
elif cc.has_function('SYS_memfd_create', prefix : '#include <sys/syscall.h>')
  config.set('HAVE_MEMFD', true)
endif

---
(source_file
  (if_condition
    (if_command
      (experession_statement
        (identifier)
        (normal_command
          (identifier)
          (string)))
      (experession_statement
        (identifier)
        (normal_command
          (identifier)
          (string)
          (identifier)))
      (experession_statement
        (identifier)
        (normal_command
          (identifier)
          (string)
          (identifier))))
    (elseif_command
      (condition_unit
        (experession_statement
          (identifier)
          (normal_command
            (identifier)
            (string)
            (pair
              (identifier)
              (string)))))
      (experession_statement
        (identifier)
        (normal_command
          (identifier)
          (string)
          (identifier))))))
